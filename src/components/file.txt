axios.get('http://localhost:8083/g')
.then((response) => {
  response.data.forEach((item: { lat: number; lon: number; }) => {
    const marker = L.marker([item.lat, item.lon]).addTo(mapRef.current!);
    const point1 = turf.point([item.lon, item.lat]);
    const point2 = turf.point([center[1], center[0]]);
    const distance = turf.distance(point1, point2, { units: 'kilometers' });

    marker.bindPopup(`Distanza dal centro: ${distance.toFixed(2)} km`).openPopup();

    const randomColor = getRandomColor();
    const line = turf.lineString([[center[1], center[0]], [item.lon, item.lat]]);
    L.geoJSON(line, {
      style: {
        color: randomColor,
        weight: 2
      }
    }).addTo(mapRef.current!);
  });
})
.catch((error) => {
  console.error('Error fetching data:', error);
});

axios.get('http://localhost:8083')
.then((response) => {
  response.data.forEach((item: { st_asgeojson: string }) => {
    const geojson = JSON.parse(item.st_asgeojson);
    L.geoJSON(geojson, {
      style: {
        color: getRandomColor(),
        weight: 2
      }
    }).addTo(mapRef.current!);
  });
})
.catch((error) => {
  console.error('Errore durante il recupero dei dati delle geofence:', error);
});


let loadPoI = () => {
    loadFeatureGroupData('aree_verdi', 'http://localhost:8083/green_areas', 'https://www.svgrepo.com/show/500085/tree.svg');
    loadFeatureGroupData('scuole', 'http://localhost:8083/schools', 'https://www.svgrepo.com/show/398258/school.svg');
    loadFeatureGroupData('sport', 'http://localhost:8083/sport', 'https://www.svgrepo.com/show/475554/gym.svg');
    loadFeatureGroupData('farmacie', 'http://localhost:8083/pharmacy', 'https://www.svgrepo.com/show/475523/pharmacy.svg');
    loadFeatureGroupData('biblioteche', 'http://localhost:8083/library', 'https://www.svgrepo.com/show/395907/books.svg');
    loadFeatureGroupData('ospedali', 'http://localhost:8083/hospital', 'https://www.svgrepo.com/show/500071/hospital.svg');
    loadFeatureGroupData('biciclette', 'http://localhost:8083/bycicles', 'https://www.svgrepo.com/show/105391/bycicle.svg');
    loadFeatureGroupData('teatri_Cinema', 'http://localhost:8083/cinemaTeathers', 'https://www.svgrepo.com/show/418375/cinema-dessert-fastfood.svg');
    loadFeatureGroupData('ludico', 'http://localhost:8083/ludic', 'https://www.svgrepo.com/show/475275/star.svg');
    loadFeatureGroupData('colonnine_Elettriche', 'http://localhost:8083/electric', 'https://www.svgrepo.com/show/396360/electric-plug.svg');
    loadFeatureGroupData('fermate_Bus', 'http://localhost:8083/bus', 'https://www.svgrepo.com/show/500067/bus-stop.svg');
  };



//calcolo percorso basato su strade dati 2 punti
    // L.Routing.control({
    //   waypoints:[
    //     L.latLng(marker1.getLatLng().lat,marker1.getLatLng().lng,),
    //     L.latLng(marker2.getLatLng().lat,marker2.getLatLng().lng,)
    //   ],
    //   lineOptions: {
    //     styles: [{ color: 'black', opacity: 1, weight: 3 }],
    //     extendToWaypoints: true, // Estendi la linea fino ai punti di passaggio
    //     missingRouteTolerance: 100 // Tolleranza per la ricerca di un percorso mancante in metri
        
    //   },
    
     

    // }).addTo(mapRef.current)






    // fetch('https://raw.githubusercontent.com/simorina/bolognaGEO/main/file.geojson')
    //   .then((response) => response.json())
    //   .then((data) => {
    //     L.geoJSON(data, {
    //       style: (feature) => {
    //         const fillColor = feature?.properties?.fill || 'red';
    //         const color = feature?.properties?.color || 'black';
    //         return {
    //           fillColor,
    //           color,
    //           weight: 2,
    //           fillOpacity: 0.5
    //         };
    //       }
    //     }).addTo(mapRef.current!);
    //   });

  // const marker1 = L.marker(center).addTo(mapRef.current!);
  // const marker2 = L.marker([44.500456, 11.346367]).addTo(mapRef.current!);
  // const point1 = turf.point([marker1.getLatLng().lng, marker1.getLatLng().lat]);
  // const point2 = turf.point([marker2.getLatLng().lng, marker2.getLatLng().lat]);
  // const distance = turf.distance(point1, point2, { units: 'kilometers' });

  //  //calcolo percorso basato su strade dati 2 punti
  //   L.Routing.control({
  //     waypoints:[
  //       L.latLng(marker1.getLatLng().lat,marker1.getLatLng().lng,),
  //       L.latLng(marker2.getLatLng().lat,marker2.getLatLng().lng,)
  //     ],
  //     lineOptions: {
  //       styles: [{ color: 'black', opacity: 1, weight: 3 }],
  //       extendToWaypoints: true, // Estendi la linea fino ai punti di passaggio
  //       missingRouteTolerance: 100 // Tolleranza per la ricerca di un percorso mancante in metri
        
  //     },
  //   }).addTo(mapRef.current)
    // marker2.bindPopup(`Distanza da punto 1: ${distance.toFixed(2)} km`);
    // const line = turf.lineString([[marker1.getLatLng().lng, marker1.getLatLng().lat], [marker2.getLatLng().lng, marker2.getLatLng().lat]]);
    // L.geoJSON(line, {
    //   style: {
    //     color: 'red',
    //     weight: 2
    //   }
    // }).addTo(mapRef.current!);












    mapRef.current.on(L.Draw.Event.CREATED, async (event) => {
      featureGroup.clearLayers();
      const layer = event.layer;
      drawnItemsRef.current?.addLayer(layer);
      if (layer instanceof L.Marker) {
        const { lat, lng } = layer.getLatLng();
        const point1 = turf.point([lng, lat]);
        const point2 = turf.point([center[1], center[0]]);
        const distance = turf.distance(point1, point2, { units: 'kilometers' });
        layer.bindPopup(`Distanza dal centro: ${distance.toFixed(2)} km`).openPopup();

        const randomColor = getRandomColor();
        const line = turf.lineString([[center[1], center[0]], [lng, lat]]);
        L.geoJSON(line, {
          style: {
            color: randomColor,
            weight: 2,
          },
        }).addTo(mapRef.current!);
      }

      if (layer instanceof L.Polygon) {
        var color = getRandomColor();
        layer.setStyle({ color: color, fillColor: color, opacity: 100, fillOpacity: 0.5 });
        featureGroup.addLayer(layer);
        axios
          .post('http://localhost:8083/shape/polygon', layer.toGeoJSON())
          .then((response) => {
            var nmarker = 0;
            response.data.forEach((item: { st_asgeojson: string }) => {
              let geojson = JSON.parse(item.st_asgeojson);
              const markerIcon = L.icon({
                iconUrl: `https://www.svgrepo.com/show/398258/school.svg`,
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41],
              });
              featureGroup.addLayer(L.marker([geojson.coordinates[1], geojson.coordinates[0]], { icon: markerIcon }));
            });
            alert('numero proprietÃ  trovate: ' + nmarker);
            drawnItemsRef.current?.addLayer(featureGroup);
          })
          .catch((error) => {
            console.error('Error sending geometry to server:', error);
          });
      }

      if (layer instanceof L.Circle) {
        featureGroup.addLayer(layer);
        circleLayer?.setStyle({ fillColor: getRandomColor(), color: 'purple' });
        var color = getRandomColor();
        layer.setStyle({ color: color, fillColor: color, opacity: 100, fillOpacity: 0.5 });
        layer.addTo(mapRef.current!);

        let r = layer.getRadius();
        let geojson = layer.toGeoJSON();
        axios
          .post('http://localhost:8083/shape/circle', { r, geojson })
          .then((response) => {
            response.data.forEach((item: { st_asgeojson: string }) => {
              let geojson = JSON.parse(item.st_asgeojson);
              const markerIcon = L.icon({
                iconUrl: `https://www.svgrepo.com/show/398258/school.svg`,
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41],
              });
              featureGroup.addLayer(L.marker([geojson.coordinates[1], geojson.coordinates[0]], { icon: markerIcon }));
            });
          })
          .catch((error) => {
            console.error('Error sending geometry to server:', error);
          });

        drawnItemsRef.current?.addLayer(featureGroup);
      }
    });

    mapRef.current.on(L.Draw.Event.DELETESTART, (_event) => {
      drawnItemsRef.current?.removeLayer(featureGroup);
    });




const loadFeatureGroupData = (key: string, url: string, urlMarkericon: string) => {
    axios.get(url)
      .then((response) => {
        response.data.forEach((item: { st_asgeojson: string, nome: string, quartiere: string }) => {
          let geojson = JSON.parse(item.st_asgeojson);

          const markerIcon = L.icon({
            iconUrl: urlMarkericon,
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41],
          });

          L.marker([geojson.coordinates[1], geojson.coordinates[0]], { icon: markerIcon }).addTo(layerGroups[key]);
        });
      })
      .catch((error) => {
        console.error(`Error fetching data for ${key}:`, error);
      });
  };